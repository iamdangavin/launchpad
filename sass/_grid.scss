// Calculate the adjustment from columns to percent.
$column-adjust: 100/$column-count;

// Calculate the gutter width.
$gutter: ($column-master-gutter-width/$column-master-outer-width)*100*1%;

// Create styles for a grid row.
// Options are: 
// * gutter: add support for a gutter.
// * table: make the row a table and the children table-cell
// * no-margin: prevent the row from having margin-left and margin-right set to "auto"
// * no-float: don't automatically apply float: left to children
@mixin row($options: ()) {
	
	@if index($options, "gutter") and not index($options, "table") {
		margin-left: 0-$gutter;
	} @else if not index($options, "no-margin") {
		margin: {
			left: auto;
			right: auto;
		};
	}
	
	@if index($options, "table") {
		display: table;
	} @else {
		@include ugly-clearfix;
	}
	
	> * {
		@if not index($options, "table") and not index($options, "no-float") {
			float: left;
		}
		
		@if index($options, "gutter") and not index($options, "table") {
			margin-left: $gutter;
		}
		
		@if index($options, "table") {
			display: table-cell;
		}
	}
}

// Create styles for a column.
// Width parameter should be the number of columns the item should consume.
// Options:
// * gutter: whether to assume a gutter when calculating the width.
// * gutter-margin: add a gutter-sized margin-left.
@mixin col($width: $column-count, $options: ()) {
	$width: $column-adjust*$width;
	
	@if $width == 100 {
		clear: both;
	} @else {
		clear: none;
	}
	
	@if index($options, "gutter-margin") {
		margin-left: $gutter;
	}
	
	@if ($width == 33) or ($width == 66) {
		@if index($options, "gutter") {
			width: $width*1%-$gutter+.3333;
		} @else {
			width: $width*1%+.3333;
		}
	} @else {
		@if index($options, "gutter") {
			width: $width*1%-$gutter;
		} @else {
			width: $width*1%;
		}		
	}
}

// Push the column $width number of columns.
@mixin push($width: $column-count) {
	$width: $column-adjust*$width;
	
	position: relative;
	@if ($width == 33) or ($width == 66) {
		left: $width*1% + .3333*$width/33;
	} @else {
		left: $width*1%;
	}
	right: auto;
}

// Pull the column $width number of columns.
@mixin pull($width: $column-count) {
	$width: $column-adjust*$width;
	
	position: relative;
	left: auto;
	@if ($width == 33) or ($width == 66) {
		right: $width*1% + .3333*$width/33;
	} @else {
		right: $width*1%;
	}
}
