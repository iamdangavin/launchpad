// Calculate the gutter width.
$gutter: ($column-master-gutter-width/$column-master-outer-width)*100*1%;
$break-point-size-names: map-keys($break-points);
$break-point-size-widths: map-values($break-points);



%row {
	@extend %ugly-clearfix;
	
	margin-left: 0-$gutter;
	
	> * {
		float: left;
		margin-left: $gutter;
	}
}

%row-no-gutter {
	@extend %row;
	
	margin-left: 0;
	
	> * {
		margin-left: 0;
	}
}

%row-no-float {
	@extend %row;
	
	> * {
		float: none;
	}
}

%row-table {
	@extend %row;
	
	display: table;
	
	> * {
		display: table-cell;
		float: none;
	}
}

$count: 5 !global;

@while $count <= 100 {
	
	%row > %column-#{$count} {
		@if ($count == 33) or ($count == 66) {
			width: $count*1%-$gutter+.3333;
		} @else {
			width: $count*1%-$gutter;
		}
		
		@if ($count == 100) {
			clear: both;
		}
	}
	
	%row-no-gutter > %column-#{$count} {
		@if ($count == 33) or ($count == 66) {
			width: $count*1%+.3333;
		} @else {
			width: $count*1%;
		}				
	}
	
	%row > %push-#{$count} {
		position: relative;
		@if ($count == 33) or ($count == 66) {
			left: $count*1% + .3333*$count/33;
		} @else {
			left: $count*1%;
		}
		right: auto;
	}
	
	%row > %pull-#{$count} {
		position: relative;
		left: auto;
		@if ($count == 33) or ($count == 66) {
			right: $count*1% + .3333*$count/33;
		} @else {
			right: $count*1%;
		}
	}
	
	$count: $count + 1 !global;
}

@each $break-point-name, $break-point-size in $break-points {
		
	// Get the next breakpoint size so we can figure out how to break things down.
	$break-point-next-name: "";
	$break-point-next-size: "";
	@if length($break-point-size-names) > index($break-point-size-names, $break-point-name) {
		$break-point-next-name: nth($break-point-size-names, index($break-point-size-names, $break-point-name)+1);
		$break-point-next-size: nth($break-point-size-widths, index($break-point-size-names, $break-point-name)+1);
	}
	
	// This is prep-work to "cache" the media query ems to hopefully speed things up.
	// But the grid FREAKS OUT when you send it anything other than a string.
	@if type-of($break-point-size) == "number" and unit($break-point-size) == "px" {
		$break-point-size: mqRemToEm(toRems($break-point-size));
	}
	
	@if type-of($break-point-next-size) == "number" and unit($break-point-next-size) == "px" {
		$break-point-next-size: mqRemToEm(toRems($break-point-next-size));
	}
	
	$count: 5 !global;
	
	@while $count <= 100 {
		
		@include private-media-guess($break-point-size, $break-point-next-size) {
					
			%row > %#{$break-point-name}-to-#{$count} {

				@if ($count == 33) or ($count == 66) {
					width: $count*1%-$gutter+.3333;
				} @else {
					width: $count*1%-$gutter;
				}
					
				@if ($count == 100) {
					clear: both;
					position: inherit;
					left: auto;
					right: auto;
				}
			}
			%row-no-gutter > %#{$break-point-name}-to-#{$count} {
				@if ($count == 33) or ($count == 66) {
					width: $count*1%+.3333;
				} @else {
					width: $count*1%;
				}
			}
			
			%row > %#{$break-point-name}-push-#{$count} {
				position: relative;
				@if ($count == 33) or ($count == 66) {
					left: $count*1% + .3333*$count/33;
				} @else {
					left: $count*1%;
				}
				right: auto;
			}
		
			%row > %#{$break-point-name}-pull-#{$count} {
				position: relative;
				left: auto;
				@if ($count == 33) or ($count == 66) {
					right: $count*1% + .3333*$count/33;
				} @else {
					right: $count*1%;
				}
			}
		}
		
		@include media-min($break-point-size) {
			%row > %#{$break-point-name}-up-to-#{$count} {
				@if ($count == 33) or ($count == 66) {
					width: $count*1%-$gutter+.3333;
				} @else {
					width: $count*1%-$gutter;
				}
				
				@if ($count == 100) {
					clear: both;
					position: inherit;
					left: auto;
					right: auto;
				}
			}
			
			%row-no-gutter > %#{$break-point-name}-up-to-#{$count} {
				@if ($count == 33) or ($count == 66) {
					width: $count*1%+.3333;
				} @else {
					width: $count*1%;
				}
			}
			
			%row > %#{$break-point-name}-up-push-#{$count} {
				position: relative;
				@if ($count == 33) or ($count == 66) {
					left: $count*1% + .3333*$count/33;
				} @else {
					left: $count*1%;
				}
				right: auto;
			}
			
			%row > %#{$break-point-name}-up-pull-#{$count} {
				position: relative;
				left: auto;
				@if ($count == 33) or ($count == 66) {
					right: $count*1% + .3333*$count/33;
				} @else {
					right: $count*1%;
				}
			}
		}
		
		@include media-max($break-point-size) {
			%row > %#{$break-point-name}-down-to-#{$count} {
				@if ($count == 33) or ($count == 66) {
					width: $count*1%-$gutter+.3333;
				} @else {
					width: $count*1%-$gutter;
				}
					
				@if ($count == 100) {
					clear: both;
					position: inherit;
					left: auto;
					right: auto;
				}
			}
			%row-no-gutter > %#{$break-point-name}-down-to-#{$count} {
				@if ($count == 33) or ($count == 66) {
					width: $count*1%+.3333;
				} @else {
					width: $count*1%;
				}
			}
			
			%row > %#{$break-point-name}-down-push-#{$count} {
				position: relative;
				@if ($count == 33) or ($count == 66) {
					left: $count*1% + .3333*$count/33;
				} @else {
					left: $count*1%;
				}
				right: auto;
			}
		
			%row > %#{$break-point-name}-down-pull-#{$count} {
				position: relative;
				left: auto;
				@if ($count == 33) or ($count == 66) {
					right: $count*1% + .3333*$count/33;
				} @else {
					right: $count*1%;
				}
			}
		}

		@if $count == 30 {
			$count: $count + 3 !global;
		}
		@else if $count == 33 {
			$count: $count + 2 !global;
		}
		@else if $count == 65 {
			$count: $count + 1 !global;
		}
		@else if $count == 66 {
			$count: $count + 4 !global;
		}
		@else {
			$count: $count + 5 !global;
		}
	}
	
	@include private-media-guess($break-point-size, $break-point-next-size) {	
		%row > %#{$break-point-name}-push-none,			
		%row > %#{$break-point-name}-pull-none {
			position: inherit;
			left: auto;
			right: auto;
		}
		
		%#{$break-point-name}-hide {
			display: none;
		}
	}
	
	@include media-min($break-point-size) {
		%row > %#{$break-point-name}-up-push-none,			
		%row > %#{$break-point-name}-up-pull-none {
			position: inherit;
			left: auto;
			right: auto;
		}
		
		%#{$break-point-name}-up-hide {
			display: none;
		}
	}
	
	@include media-max($break-point-size) {
		%row > %#{$break-point-name}-down-push-none,			
		%row > %#{$break-point-name}-down-pull-none {
			position: inherit;
			left: auto;
			right: auto;
		}
		%#{$break-point-name}-down-hide {
			display: none;
		}
	}
}


@if length($column-create-classes) > 0 {
	@include grid-classes;
}