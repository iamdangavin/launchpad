// Calculate the gutter width.
$gutter: ($column-master-gutter-width/$column-master-outer-width)*100*1%;

form {
}

.button {
	@include rem('padding', 2px 10px);
	
	background: #EFEFEF;
	display: inline-block;
	text-decoration: none;
}

.callout {
	@include rem('padding', 10px);
	
	background: #E0E0E0;
}

.skate {
	@include rem('padding', 10px);
	
	border: 1px dotted gray;
}

.alignnone {}

.alignleft {
	text-align: left;
}

img.alignleft {
	display: block;
	float: left;
}

.alignright {
	text-align: right;	
}

img.alignright {
	display: block;
	float: right;
}

.aligncenter {
	text-align: center;	
}

img.aligncenter {
	display: block;
	margin: auto;
}

.gallery {
	@extend %ugly-clearfix;
	
	margin-left: 0-$gutter;
	
	> * {
		display: block;
		float: left;
		margin-left: $gutter;
	}
	
	$i: 1;
	@while $i < 10 {
		
		&.gallery-columns-#{$i} {
			> * {
				width: (100/$i)*1%-$gutter;
			}
			
			img {
				display: block;
				height: auto;
				width: 100%;
			}
		}
		$i: $i + 1;
	}
}

@-webkit-keyframes system-notification-swap {
    0% {
        -webkit-transform: translateY(100%);
    }

    10% {
        -webkit-transform: translateY(0px);
    }
    
    90% {
        -webkit-transform: translateY(0px);
    }
    
    100% {
        -webkit-transform: translateY(100%);
    }
}

@-moz-keyframes system-notification-swap {
    0% {
        -moz-transform: translateY(100%);
    }

    10% {
        -moz-transform: translateY(0px);
    }
    
    90% {
        -moz-transform: translateY(0px);
    }
    
    100% {
        -moz-transform: translateY(100%);
    }
}

@-ms-keyframes system-notification-swap {
    0% {
        -ms-transform: translateY(100%);
    }

    10% {
        -ms-transform: translateY(0px);
    }
    
    90% {
        -ms-transform: translateY(0px);
    }
    
    100% {
        -ms-transform: translateY(100%);
    }
}

@keyframes system-notification-swap {
    0% {
        transform: translateY(100%);
    }

    10% {
        transform: translateY(0px);
    }
    
    90% {
        transform: translateY(0px);
    }
    
    100% {
        transform: translateY(100%);
    }
}


.system-notification {
	@include rem('font-size', 14px);
	
	-webkit-animation: system-notification-swap .5s ease .5s 1 normal normal;
	-moz-animation: system-notification-swap .5s ease .5s 1 normal normal;
	-ms-animation: system-notification-swap .5s ease .5s 1 normal normal;
	animation: system-notification-swap .5s ease .5s 1 normal normal;
	background: #FFFCDB;
	border-top: 1px solid #CFCA99;
	bottom: 0;
	color: #666;
	color: rgba(0, 0, 0, .75);
	padding: 10px;
	position: fixed;
	text-align: center;
	-webkit-transform: translateY(100%);
	-moz-transform: translateY(100%);
	-ms-transform: translateY(100%);
	transform: translateY(100%);
	width: 100%;
	z-index: 999;
	
	&:first-letter {
		font-size: 1.2em;
		vertical-align: bottom;
	}
}

.row {
	@extend %ugly-clearfix;
	
	margin-left: 0-$gutter;
	
	&.no-gutter {
		margin-left: 0;
	}
}

[class*=column-] {
	float: left;
	margin-left: $gutter;
	
	.no-gutter & {
		margin-left: 0;
	}
	
	// Floating right is out of Foundation. 
	// I'm not 100% sure I like it.
	&:last-child {
		float: right;
	}
}

$i: 1;
@while $i <= 100 {

	@if index($column-create-classes, $i) {
		.column-#{$i} {
			@if ($i == 33) or ($i == 66) {
				width: $i*1%-$gutter+.3333;
			} @else {
				width: $i*1%-$gutter;
			}
			
			.no-gutter & {
				@if ($i == 33) or ($i == 66) {
					width: $i*1%+.3333;
				} @else {
					width: $i*1%;
				}
			}
		}
		
		.offset-#{$i} {
			@if ($i == 33) or ($i == 66) {
				margin-left: $i*1% + .3333*$i/33 + $gutter;
			} @else {
				margin-left: $i*1% + $gutter;
			}
			
			.no-gutter {
				@if ($i == 33) or ($i == 66) {
					margin-left: $i*1% + .3333*$i/33;
				} @else {
					margin-left: $i*1%;
				}
			}
		}
		
		.push-#{$i} {
			position: relative;
			@if ($i == 33) or ($i == 66) {
				left: $i*1% + .3333*$i/33;
			} @else {
				left: $i*1%;
			}
			right: auto;
			
			&:last-child {
				float: left;
			}
		}
		
		.pull-#{$i} {
			position: relative;
			left: auto;
			@if ($i == 33) or ($i == 66) {
				right: $i*1% + .3333*$i/33;
			} @else {
				right: $i*1%;
			}
			
			&:last-child {
				float: left;
			}
		}
	}
	
	$i: $i + 1 !global;	
}

// Having this separate loop reduces output size by around 1.5kb.
@each $break-point-name, $break-point-size in $break-points {
	
	$break-point-size: toRems($break-point-size);
	
	@include media-max($break-point-name) {
		$i: 1 !global;
		@while $i <= 100 {
			@if index($column-create-classes, $i) {
				[class*=column-].#{$break-point-name}-to-#{$i} {
					@if ($i == 33) or ($i == 66) {
						width: $i*1%-$gutter+.3333;
					} @else {
						width: $i*1%-$gutter;
					}
					
					@if ($i == 100) {
						clear: both;
					}
					
					.#{$break-point-name}-to-no-gutter &,
					.no-gutter & {
						@if ($i == 33) or ($i == 66) {
							width: $i*1%+.3333;
						} @else {
							width: $i*1%;
						}
					}
					
					.#{$break-point-name}-to-gutter & {
						margin-left: $gutter;
						
						@if ($i == 33) or ($i == 66) {
							width: $i*1%-$gutter+.3333;
						} @else {
							width: $i*1%-$gutter;
						}
					}
					
					&[class*=offset-] {
						margin-left: auto;
						
						.no-gutter & {
							margin-left: auto;
						}
					}
					
					&[class*=push-],
					&[class*=pull-] {
						position: inherit;
						left: auto;
						right: auto;
						
						&:last-child {
							float: none;
						}
					}
				}
				
			}
			
			$i: $i + 1 !global;	
		}
		
		[class*=column-].#{$break-point-name}-hide,
		.#{$break-point-name}-hide {
			display: none;
		}
		
		[class*=column-].#{$break-point-name}-show,
		.#{$break-point-name}-show {
			display: inherit;
		}
		
		.row {
			
			&.no-gutter.#{$break-point-name}-to-gutter {
				margin-left: 0-$gutter;
			}
			
			&.#{$break-point-name}-to-100 [class*=column-], 
			&.#{$break-point-name}-to-100 [class*=column-][class*=#{$break-point-name}-to-] {
				margin-left: 0;
				clear: both;
				width: auto;
			}
			
			&.#{$break-point-name}-to-100,
			&.#{$break-point-name}-to-100[class*=-to-gutter] {
				margin-left: 0;
			}
		}
	}
}