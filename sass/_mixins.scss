// Figure out the root font percentage from a pixel value.
@function rootRemPercent($px) {
	@return $px/16px*100*1%;
}

// Convert a pixel value to REMs.
@function toRems($px) {
	$baseline-rem: $root-font-px / 1rem;

	@if $px == 0 {
		@return 0;
	}

	@if type-of($px) == "number" {
		@if unit($px) == "rem" {
			@return $px;
		} @else {
			@return $px / $baseline-rem;
		}
	} @else {
		$rems: ();

		@each $value in $px {
			@if type-of($px) == "number" {
				@if $value == 0 {
					$rems: append($rems, $value);
				} @else {
					$rems: append($rems, ($value / $baseline-rem));
				}
			} @else {
				$rems: append($rems, $value);
			}
		}

		@return $rems;
	}
}

// Browser support for rem-based media queries is broken.  
// Safari gets it right (based on html font size), but FF and Chrome do not (based on browser stylesheet font size).
// All browsers use the browser stylesheet font size for em-based media queries.  
// So, we need to do what is predictable, even if it isn't ideal.
@function mqRemToEm($rem) {
	$root_font_fix: $root-font-px/16px;
	
	@if type-of($rem) == "number" and unit($rem) == "rem" {
		$rem: ($rem / ($rem * 0 + 1)) * ($root_font_fix / ($root_font_fix * 0 + 1));
		@return $rem + "em";
	} @else {
		@return $rem;
	}
}

// Make a REM'd propert with pixel fallback.
@mixin rem($property, $values) {
	#{$property}: $values;
	#{$property}: toRems($values);
}

// Retina media query.
@mixin media-2x {
	@media
	only screen and (-webkit-min-device-pixel-ratio: 2),
	only screen and (   min--moz-device-pixel-ratio: 2),
	only screen and (     -o-min-device-pixel-ratio: 2/1),
	only screen and (        min-device-pixel-ratio: 2),
	only screen and (                min-resolution: 192dpi),
	only screen and (                min-resolution: 2dppx) { 
		@content;
	}
}

// Max-width media query.
@mixin media-max($size) {
	@if type-of($size) == "number" {
		$size: toRems($size);
	} @else {
		$size: toRems(map-get($break-points, $size));
	}
	
	$size: mqRemToEm($size);
	
	@media (max-width: $size) {
		@content;
	}
}

// Min-width media query.
@mixin media-min($size) {
	@if type-of($size) == "number" {
		$size: toRems($size);
	} @else {
		$size: toRems(map-get($break-points, $size));
	}
	
	$size: mqRemToEm($size);
	
	@media (min-width: $size) {
		@content;
	}
}

// Create a media query that matches the inner range of two values.
@mixin media-range($small, $large) {
	@if type-of($small) == "number" {
		$small: toRems($small);
	} @else {
		$small: toRems(map-get($break-points, $small));
	}
	@if type-of($large) == "number" {
		$large: toRems($large);
	} @else {
		$large: toRems(map-get($break-points, $large));
	}
	@if $small > $large {
		$tmp_small: $small;
		$small: $large;
		$large: $tmp_small;
	}
	
	$small: mqRemToEm($small);
	$large: mqRemToEm($large);
	
	@media (min-width: $small) and (max-width: $large) {
		@content;
	}
}

// Create a media query that matches the outer range of two values.
@mixin media-range-outer($small, $large) {
	@if type-of($small) == "number" {
		$small: toRems($small);
	} @else {
		$small: toRems(map-get($break-points, $small));
	}
	@if type-of($large) == "number" {
		$large: toRems($large);
	} @else {
		$large: toRems(map-get($break-points, $large));
	}
	
	$small: mqRemToEm($small);
	$large: mqRemToEm($large);
	
	@if $small > $large {
		$tmp_small: $small;
		$small: $large;
		$large: $tmp_small;
	}
	@media (max-width: $small), (min-width: $large) {
		@content;
	}
}

// DO NOT USE THIS MIXIN.  INTERNAL USE ONLY!
@mixin private-media-guess($small, $large) {
	@if $small != "" and $large != "" {
		@if map-get($break-points, $small) > map-get($break-points, $large) {
			$tmp_small: $small;
			$small: $large;
			$large: $tmp_small;
		}
		@include media-range($small, $large) {
			@content;
		}
	} @else if $large == "" {
		@include media-max($small) {
			@content;
		}
	} @else if $small == "" {
		@include media-min($large) {
			@content;
		}
	}
}